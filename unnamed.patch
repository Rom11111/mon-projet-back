Index: src/main/java/org/romain/demo2/annotation/FileValidationUtil.java
===================================================================
diff --git a/src/main/java/org/romain/demo2/annotation/FileValidationUtil.java b/src/main/java/org/romain/demo2/annotation/FileValidationUtil.java
deleted file mode 100644
--- a/src/main/java/org/romain/demo2/annotation/FileValidationUtil.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package edu.ban7.springdemo.upload.annotation;
-
-import jakarta.validation.ConstraintValidatorContext;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.util.List;
-
-
-public class FileValidationUtil {
-
-    public static boolean isValidFileType(MultipartFile file, List<String> acceptedTypes, ConstraintValidatorContext context) {
-        if (file == null || file.isEmpty()) {
-            return true; // Si le fichier est facultatif ou vide
-        }
-        String contentType = file.getContentType();
-        if (contentType == null || !acceptedTypes.contains(contentType)) {
-            context.buildConstraintViolationWithTemplate(
-                    "Extension de fichier invalide : '" + contentType + "'. acceptés : '" +
-                            String.join("', '", acceptedTypes) + "'")
-                    .addConstraintViolation()
-                    .disableDefaultConstraintViolation();
-            return false;
-        }
-        return true;
-    }
-    public static boolean isValidFileSize(MultipartFile file, long maxSize, ConstraintValidatorContext context) {
-        if (maxSize > 0 && file.getSize() > maxSize) {
-            context.buildConstraintViolationWithTemplate("Taille de fichier trop grande : " + file.getSize() + ", max : " + maxSize)
-                    .addConstraintViolation()
-                    .disableDefaultConstraintViolation();
-            return false;
-        }
-        return true;
-    }
-
-}
Index: src/main/java/org/romain/demo2/annotation/ArrayFileValidator.java
===================================================================
diff --git a/src/main/java/org/romain/demo2/annotation/ArrayFileValidator.java b/src/main/java/org/romain/demo2/annotation/ArrayFileValidator.java
deleted file mode 100644
--- a/src/main/java/org/romain/demo2/annotation/ArrayFileValidator.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package edu.ban7.springdemo.upload.annotation;
-
-import jakarta.validation.ConstraintValidator;
-import jakarta.validation.ConstraintValidatorContext;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.multipart.MultipartFile;
-import java.util.Arrays;
-import java.util.List;
-
-public class ArrayFileValidator implements ConstraintValidator<ValidFile, MultipartFile[]> {
-
-    private List<String> acceptedTypes;
-    private long maxSize;
-    private final FileConfig fileConfig;
-
-    @Autowired
-    public ArrayFileValidator(FileConfig fileConfig) {
-        this.fileConfig = fileConfig;
-    }
-
-    @Override
-    public void initialize(ValidFile constraintAnnotation) {
-        String[] customTypes = constraintAnnotation.acceptedTypes();
-        if (customTypes.length > 0) {
-            this.acceptedTypes = Arrays.asList(customTypes);
-        } else {
-            this.acceptedTypes = Arrays.asList(fileConfig.getDefaultAcceptedTypes());
-        }
-        this.maxSize = constraintAnnotation.maxSize();
-    }
-
-    @Override
-    public boolean isValid(MultipartFile[] files, ConstraintValidatorContext context) {
-        if (files == null || files.length == 0) {
-            return true; // Si le tableau est vide ou null
-        }
-        for (MultipartFile file : files) {
-            if (file != null && !file.isEmpty()) {
-                // Vérification du type de contenu et de la taille
-                return FileValidationUtil.isValidFileSize(file, maxSize, context) &&
-                        FileValidationUtil.isValidFileType(file, acceptedTypes, context);
-            }
-        }
-        return true;
-    }
-}
\ No newline at end of file
Index: src/main/java/org/romain/demo2/annotation/FileValidator.java
===================================================================
diff --git a/src/main/java/org/romain/demo2/annotation/FileValidator.java b/src/main/java/org/romain/demo2/annotation/FileValidator.java
deleted file mode 100644
--- a/src/main/java/org/romain/demo2/annotation/FileValidator.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package edu.ban7.springdemo.upload.annotation;
-
-import jakarta.validation.ConstraintValidator;
-import jakarta.validation.ConstraintValidatorContext;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.util.Arrays;
-import java.util.List;
-
-
-public class FileValidator implements ConstraintValidator<ValidFile, MultipartFile> {
-
-    private List<String> acceptedTypes;
-    private long maxSize;
-    private final FileConfig fileConfig;
-
-    @Autowired
-    public FileValidator(FileConfig fileConfig) {
-        this.fileConfig = fileConfig;
-    }
-
-    @Override
-    public void initialize(ValidFile constraintAnnotation) {
-        String[] customTypes = constraintAnnotation.acceptedTypes();
-        if (customTypes.length > 0) {
-            this.acceptedTypes = Arrays.asList(customTypes);
-        } else {
-            this.acceptedTypes = Arrays.asList(fileConfig.getDefaultAcceptedTypes());
-        }
-        this.maxSize = constraintAnnotation.maxSize();
-    }
-
-    @Override
-    public boolean isValid(MultipartFile file, ConstraintValidatorContext context) {
-        if (file == null || file.isEmpty()) {
-            return true; // Si le fichier est facultatif ou vide
-        }
-
-        // Vérification du type de contenu et de la taille
-        return FileValidationUtil.isValidFileSize(file, maxSize, context) &&
-                FileValidationUtil.isValidFileType(file, acceptedTypes, context);
-    }
-}
\ No newline at end of file
Index: src/main/java/org/romain/demo2/annotation/ValidFile.java
===================================================================
diff --git a/src/main/java/org/romain/demo2/annotation/ValidFile.java b/src/main/java/org/romain/demo2/annotation/ValidFile.java
deleted file mode 100644
--- a/src/main/java/org/romain/demo2/annotation/ValidFile.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package edu.ban7.springdemo.upload.annotation;
-
-import jakarta.validation.Constraint;
-import jakarta.validation.Payload;
-
-import java.lang.annotation.*;
-
-
-@Documented
-@Constraint(validatedBy = {FileValidator.class, ArrayFileValidator.class})
-@Target({ ElementType.PARAMETER, ElementType.FIELD })
-@Retention(RetentionPolicy.RUNTIME)
-public @interface ValidFile {
-    String message() default "Type de fichier invalide ou taille de fichier trop grande.";
-    Class<?>[] groups() default {};
-    Class<? extends Payload>[] payload() default {};
-    String[] acceptedTypes() default {};
-    long maxSize() default -1; // taille maximum en octet (-1 signifie pas de limite de taille)
-}
\ No newline at end of file
Index: src/main/java/org/romain/demo2/annotation/FileConfig.java
===================================================================
diff --git a/src/main/java/org/romain/demo2/annotation/FileConfig.java b/src/main/java/org/romain/demo2/annotation/FileConfig.java
deleted file mode 100644
--- a/src/main/java/org/romain/demo2/annotation/FileConfig.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package edu.ban7.springdemo.upload.annotation;
-
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-public class FileConfig {
-
-    @Value("${file.default.accepted.types}")
-    private String[] defaultAcceptedTypes;
-
-    public String[] getDefaultAcceptedTypes() {
-        return defaultAcceptedTypes;
-    }
-}
\ No newline at end of file
