name: Build and Push Docker Image  # Nom du workflow

on:
  push:
    branches:
      - main  # Déclencher le workflow uniquement sur les pushes vers la branche main

jobs:
  build:
    runs-on: ubuntu-latest  # Exécuter sur une machine virtuelle Ubuntu

    steps:
      # Étape 1: Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v2  # Télécharge le dépôt Git

      # Étape 2: Chargement des variables d'environnement
      - name: Load .env file
        run: |
          set -a  # Active l'exportation automatique des variables
          source .env  # Charge le fichier .env
          set +a  # Désactive l'exportation automatique
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV  # Exporte APP_NAME pour les étapes suivantes

      # Étape 3: Installation de JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'  # Distribution OpenJDK

      # Étape 4: Mise à jour du secret JWT
      - name: Update JWT Secret in application.properties
        run: sed -i 's/${JWT_SECRET}/${{ secrets.JWT_SECRET }}/' src/main/resources/application.properties
        # Remplace le placeholder par le secret stocké dans GitHub Secrets

      # Étape 5: Configuration de l'hôte de la base de données
      - name: Update DB_HOST in application.properties, to database service name in docker-compose (db)
        run: sed -i 's/${DB_HOST}/db/' src/main/resources/application.properties
        # Configure le host de la DB pour Docker Compose

      # Étape 6: Configuration du dossier de stockage public
      - name: Update PUBLIC_UPLOAD_FOLDER in application.properties, to /public-upload
        run: sed -i 's|public.upload.folder=.*|public.upload.folder=/public-upload|' src/main/resources/application.properties
        # Définit le chemin absolu pour les uploads publics

      # Étape 7: Configuration du dossier de stockage privé
      - name: Update PRIVATE_UPLOAD_FOLDER in application.properties, to /private-upload
        run: sed -i 's|private.upload.folder=.*|private.upload.folder=/private-upload|' src/main/resources/application.properties
        # Définit le chemin absolu pour les uploads privés

      # Étape 8: Compilation du projet avec Maven
      - name: Build with Maven
        run: mvn clean package  # Compile le projet et crée le JAR

      # Étape 9: Récupération de la version depuis pom.xml
      - name: Extract version from pom.xml
        id: extract_version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        # Extrait la version du projet pour le tagging Docker

      # Étape 10: Authentification à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Utilise un secret GitHub
          password: ${{ secrets.DOCKER_PASSWORD }}   # Utilise un secret GitHub

      # Étape 11: Construction et envoi de l'image Docker
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }}
        # Construit l'image avec le format: [USER]/[APP]:[VERSION]
        # Pousse l'image vers Docker Hub
