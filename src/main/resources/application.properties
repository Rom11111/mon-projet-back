# Importe les variables d'environnement depuis deux fichiers :
# - .env (obligatoire)
# - .local.env (optionnel, utile pour override en local sans toucher au .env principal)
spring.config.import=file:./.env[.properties],optional:file:./.local.env[.properties]
#URL de connexion à la base de données MySQL avec des variables pour plus de flexibilité :
# - ${DB_HOST} ? ex : localhost
# - ${DB_PORT} ? ex : 3306
# - ${DB_NAME} ? ex : spring_td
# - createDatabaseIfNotExist=true ? crée la base si elle n?existe pas
spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=UTC&createDatabaseIfNotExist=true
# Identifiants pour la BDD (mieux vaut les stocker dans .env pour éviter de les exposer)
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
#  Gestion du schéma de la base via Hibernate :
# - ${EXECUTE_SQL_DDL} peut être : create / update / validate / none
#   ? "create" : supprime/recrée les tables à chaque démarrage (utile en dev)
spring.jpa.hibernate.ddl-auto=${EXECUTE_SQL_DDL}
# Nom de la plateforme pour les fichiers d?init SQL :
# - ${SQL_FILE_NAME} ? sert à choisir le fichier SQL selon l?environnement
#   ? par exemple : "donnees-test" si ton fichier est `schema-donnees-test.sql`
spring.sql.init.platform=${SQL_FILE_NAME}
# Assure que les scripts SQL d'init sont lancés **après** que la BDD soit prête
spring.jpa.defer-datasource-initialization=true
# Contrôle si les scripts SQL sont lancés au démarrage :
# - ${EXECUTE_SQL_INSERT} peut être "always" ou "never"
spring.sql.init.mode=${EXECUTE_SQL_INSERT}
# Clé secrète pour les tokens JWT, stockée dans le .env (évite de la hardcoder)
jwt.secret=${JWT_SECRET}

spring.servlet.multipart.max-file-size=30MB
spring.servlet.multipart.max-request-size=30MB

public.upload.folder=${PUBLIC_UPLOAD_FOLDER}