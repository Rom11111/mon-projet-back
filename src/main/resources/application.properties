# Importe les variables d'environnement depuis deux fichiers :
# - .env (obligatoire)
# - .local.env (optionnel, utile pour override en local sans toucher au .env principal)
spring.config.import=file:./.env[.properties],optional:file:./.local.env[.properties]
#URL de connexion a la base de donnees MySQL avec des variables pour plus de flexibilite :
# - ${DB_HOST} ? ex : localhost
# - ${DB_PORT} ? ex : 3306
# - ${DB_NAME} ? ex : spring_td
# - createDatabaseIfNotExist=true ? cree la base si elle nexiste pas
spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?serverTimezone=UTC&createDatabaseIfNotExist=true
# Identifiants pour la BDD (mieux vaut les stocker dans .env pour éviter de les exposer)
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
#  Gestion du schema de la base via Hibernate :
# - ${EXECUTE_SQL_DDL} peut être : create / update / validate / none
#   ? "create" : supprime/recree les tables à chaque demarrage (utile en dev)
spring.jpa.hibernate.ddl-auto=${EXECUTE_SQL_DDL}
# Nom de la plateforme pour les fichiers d'init SQL :
# - ${SQL_FILE_NAME} ? sert à choisir le fichier SQL selon l'environnement
#   ? par exemple : "donnees-test" si ton fichier est `schema-donnees-test.sql`
spring.sql.init.platform=${SQL_FILE_NAME}
# Assure que les scripts SQL d'init sont lances **après** que la BDD soit prete
spring.jpa.defer-datasource-initialization=true
# Controle si les scripts SQL sont lances au demarrage :
# - ${EXECUTE_SQL_INSERT} peut être "always" ou "never"
spring.sql.init.mode=${EXECUTE_SQL_INSERT}
# Clef secrete pour les tokens JWT, stockee dans le .env (evite de la hardcoder)
jwt.secret=${JWT_SECRET}


public.upload.folder=${PUBLIC_UPLOAD_FOLDER}
private.upload.folder=${PRIVATE_UPLOAD_FOLDER}
#Definie la taille maximum d'une requete et d'un fichier
#Attention, l'annotation personnalisée "ValidFile" via son parametre "maxSize" n'ecrase pas les proprietes ci-dessous
#La propriete "maxSize" de "ValidFile" permet de "reduire" les proprietes ci-dessous pour un fichier en particulier
#Dans tous les cas, les proprietes ci-dessous doivent etre renseignees, et representeront toujours la limite haute de spring
spring.servlet.multipart.max-file-size=30MB
spring.servlet.multipart.max-request-size=30MB
#alimente la valeur par defaut de l'annotation personnalisee "ValidFile"
#Cette valeur peut etre ecrase via son parametre "acceptedTypes"
file.default.accepted.types=image/png,image/jpeg,application/pdf

email.host=${EMAIL_HOST}
email.port=${EMAIL_PORT}
email.user=${EMAIL_USER}
email.password=${EMAIL_PASSWORD}


